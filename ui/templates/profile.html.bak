{% extends "base.html" %}

{% block title %}sherwood | profile{% endblock %}

{% block style %}
{% endblock %}

{% block content %}
<div>
  <div>
    <h1>profile</h1>
    <label>display name:</label> <span id="user-display-name"></span><br />
    <label>email:</label> <span id="user-email"></span><br />
    <label>verified:</label> <span id="user-is-verified"></span><br /><br />
  </div>

  <div>
    <button id="buy-button">buy</button>
    <button id="sell-button">sell</button>
    <button id="invest-button">invest</button>
    <button id="divest-button">divest</button>
  </div>

  <div id="portfolio-container">
    {%include 'portfolio.html' %}
  </div>

</div>

<!-- buy modal -->
<div class="modal-overlay" id="buy-modal-overlay">
  <div class="modal">
    <button class="close-button" id="buy-close-button">&times;</button>
    <h2>buy</h2>
    <form id="buy-form">
      <label>symbol:</label><br /> <input type="text" name="symbol" required /><br /><br />
      <label>dollars:</label><br /> <input type="number" name="dollars" required /><br /><br />
      <button type="submit">submit</button><br />
    </form>
    <p class="error" id="buy-error-message"></p>
  </div>
</div>


<!-- sell modal -->
<div class="modal-overlay" id="sell-modal-overlay">
  <div class="modal">
    <button class="close-button" id="sell-close-button">&times;</button>
    <h2>sell</h2>
    <form id="sell-form">
      <label>symbol:</label><br /> <input type="text" name="symbol" required /><br /><br />
      <label>dollars:</label><br /> <input type="number" name="dollars" required /><br /><br />
      <button type="submit">submit</button><br />
    </form>
    <p class="error" id="sell-error-message"></p>
  </div>
</div>

<!-- invest modal -->
<div class="modal-overlay" id="invest-modal-overlay">
  <div class="modal">
    <button class="close-button" id="invest-close-button"> &times; </button>
    <h2>invest</h2>
    <form id="invest-form">
      <label>portfolio id:</label><br />
      <input type="number" step="1" min="1" name="investee_portfolio_id" required /><br /><br />
      <label>dollars:</label><br />
      <input type="number" name="dollars" required /><br /><br />
      <button type="submit">submit</button><br />
    </form>
    <p class="error" id="invest-error-message"></p>
  </div>
</div>

<!-- divest modal -->
<div class="modal-overlay" id="divest-modal-overlay">
  <div class="modal">
    <button class="close-button" id="divest-close-button"> &times; </button>
    <h2>divest</h2>
    <form id="divest-form">
      <label>portfolio id:</label><br />
      <input type="number" step="1" min="1" name="investee_portfolio_id" required /><br /><br />
      <label>dollars:</label><br />
      <input type="number" name="dollars" required /><br /><br />
      <button type="submit">submit</button><br />
    </form>
    <p class="error" id="divest-error-message"></p>
  </div>
</div>
{% endblock %}

{% block script %}
<script>
  const userDataContainer = document.getElementById("user-data-container");
  const user = JSON.parse(userDataContainer.getAttribute("data-user"));
  console.log(user)

  document.getElementById("user-display-name").textContent = user.display_name;
  document.getElementById("user-email").textContent = user.email;
  document.getElementById("user-is-verified").textContent = user.is_verified;

  document.getElementById("portfolio-cash").textContent = `$${user.portfolio.cash.toFixed(2)}`;

  const portfolioHoldingsTable = document.getElementById("portfolio-holdings-table");
  user.portfolio.holdings.forEach(holding => {
    const row = portfolioHoldingsTable.insertRow();
    row.insertCell(0).textContent = holding.symbol;
    row.insertCell(1).textContent = `${holding.units.toFixed(2)}`;
    row.insertCell(2).textContent = `$${holding.cost.toFixed(2)}`;
    row.insertCell(3).textContent = `$${holding.value.toFixed(2)}`;
    row.insertCell(4).textContent = `$${holding.gain_or_loss.toFixed(2)} (${(100 * holding.gain_or_loss / holding.cost).toFixed(1)}%)`;
  })

  const portfolioOwnershipTable = document.getElementById("portfolio-ownership-table");
  user.portfolio.ownership.forEach(ownership => {
    const row = portfolioOwnershipTable.insertRow();
    row.insertCell(0).textContent = `${ownership.owner_id}`;
    row.insertCell(1).textContent = `$${ownership.cost.toFixed(2)}`;
    const value = ownership.percent * user.portfolio.value;
    const gainOrLoss = value - ownership.cost;
    row.insertCell(2).textContent = `$${value.toFixed(2)}`;
    row.insertCell(3).textContent = `$${gainOrLoss.toFixed(2)} (${(100 * gainOrLoss / ownership.cost).toFixed(1)}%)`;
  })

  function setupModal(openButtonId, closeButtonId, overlayId) {
    const openButton = document.getElementById(openButtonId);
    const closeButton = document.getElementById(closeButtonId);
    const overlay = document.getElementById(overlayId);
    openButton.addEventListener("click", () => {
      overlay.classList.add("active");
    });
    closeButton.addEventListener("click", () => {
      overlay.classList.remove("active");
    });
    overlay.addEventListener("click", (event) => {
      if (event.target === overlay) {
        overlay.classList.remove("active");
      }
    });
  }

  setupModal("buy-button", "buy-close-button", "buy-modal-overlay");
  setupModal("sell-button", "sell-close-button", "sell-modal-overlay");
  setupModal("invest-button", "invest-close-button", "invest-modal-overlay");
  setupModal("divest-button", "divest-close-button", "divest-modal-overlay");

  function setupForm(formId, errorMessageId, overlayId, endpoint) {
    const form = document.getElementById(formId);
    const errorMessage = document.getElementById(errorMessageId);
    const overlay = document.getElementById(overlayId);

    form.addEventListener("submit", async (event) => {
      event.preventDefault();
      errorMessage.textContent = "";

      const formData = new FormData(form);
      const json = Object.fromEntries(formData.entries());

      try {
        const response = await fetch(endpoint, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(json),
        });
        if (response.ok) {
          overlay.classList.remove("active");
          form.reset();
          location.reload();
        } else {
          const data = await response.json();
          errorMessage.textContent =
            data?.error?.detail || UNEXPECTED_ERROR;
        }
      } catch (error) {
        console.error(error);
        errorMessage.textContent = error.message || UNEXPECTED_ERROR;
      }
    });
  }

  setupForm("buy-form", "buy-error-message", "buy-modal-overlay", "/sherwood/api/buy");
  setupForm("sell-form", "sell-error-message", "sell-modal-overlay", "/sherwood/api/sell");
  setupForm("invest-form", "invest-error-message", "invest-modal-overlay", "/sherwood/api/invest");
  setupForm("divest-form", "divest-error-message", "divest-modal-overlay", "/sherwood/api/divest");

</script>
{% endblock %}